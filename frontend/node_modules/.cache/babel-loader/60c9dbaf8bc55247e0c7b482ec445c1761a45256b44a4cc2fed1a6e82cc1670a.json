{"ast":null,"code":"import * as actionTypes from '../action/types';\n//Reducers to store all changes into states using redux\nexport const uniReducers = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    // case actionTypes.ADDNEWTODO:\n    //     // Adding a todo item\n    //     return [action.payload, ...state];\n    case actionTypes.LISTUNI:\n      // Listing all Universities\n      return action.payload;\n\n    // case actionTypes.TOGGLETODO:\n    //     // Changing status of an item\n    //     return state.map(todo => (\n    //         todo._id === action.payload._id ? {...todo,status: !todo.status} : todo\n    //     ))\n    // case actionTypes.DELETETODO:\n    //     // Deleting a item from state\n    //     return state.filter(todo => todo._id !== action.payload._id)\n    // case actionTypes.UPDATENEWTODO:\n    //     // Updating an existing todo item in state\n    //     return state.map(todo => (\n    //         todo._id === action.payload._id ? {...todo,title: action.payload.title, description: action.payload.description, date:action.payload.date,time:action.payload.time} : todo\n    //     ))\n    default:\n      return [];\n  }\n};\nexport const uniCourses = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    // case actionTypes.ADDNEWTODO:\n    //     // Adding a todo item\n    //     return [action.payload, ...state];\n\n    case actionTypes.LISTCOURSE:\n      // Listing all Courses\n      return action.payload;\n    // case actionTypes.TOGGLETODO:\n    //     // Changing status of an item\n    //     return state.map(todo => (\n    //         todo._id === action.payload._id ? {...todo,status: !todo.status} : todo\n    //     ))\n    // case actionTypes.DELETETODO:\n    //     // Deleting a item from state\n    //     return state.filter(todo => todo._id !== action.payload._id)\n    // case actionTypes.UPDATENEWTODO:\n    //     // Updating an existing todo item in state\n    //     return state.map(todo => (\n    //         todo._id === action.payload._id ? {...todo,title: action.payload.title, description: action.payload.description, date:action.payload.date,time:action.payload.time} : todo\n    //     ))\n    default:\n      return [];\n  }\n};","map":{"version":3,"names":["actionTypes","uniReducers","state","action","type","LISTUNI","payload","uniCourses","LISTCOURSE"],"sources":["/Users/nethraneu/Documents/WEB DEV/finalProject/final-project-electrons/frontend/src/redux/reducers/uniReducers.js"],"sourcesContent":["import * as actionTypes from '../action/types'\n//Reducers to store all changes into states using redux\nexport const uniReducers = (state = [], action) => {\n    switch(action.type){\n        // case actionTypes.ADDNEWTODO:\n        //     // Adding a todo item\n        //     return [action.payload, ...state];\n        case actionTypes.LISTUNI:\n            // Listing all Universities\n            return action.payload\n        \n        // case actionTypes.TOGGLETODO:\n        //     // Changing status of an item\n        //     return state.map(todo => (\n        //         todo._id === action.payload._id ? {...todo,status: !todo.status} : todo\n        //     ))\n        // case actionTypes.DELETETODO:\n        //     // Deleting a item from state\n        //     return state.filter(todo => todo._id !== action.payload._id)\n        // case actionTypes.UPDATENEWTODO:\n        //     // Updating an existing todo item in state\n        //     return state.map(todo => (\n        //         todo._id === action.payload._id ? {...todo,title: action.payload.title, description: action.payload.description, date:action.payload.date,time:action.payload.time} : todo\n        //     ))\n        default:\n            return[];\n\n    }\n} \n\nexport const uniCourses = (state = [], action) => {\n    switch(action.type){\n        // case actionTypes.ADDNEWTODO:\n        //     // Adding a todo item\n        //     return [action.payload, ...state];\n        \n        case actionTypes.LISTCOURSE:\n            // Listing all Courses\n            return action.payload\n        // case actionTypes.TOGGLETODO:\n        //     // Changing status of an item\n        //     return state.map(todo => (\n        //         todo._id === action.payload._id ? {...todo,status: !todo.status} : todo\n        //     ))\n        // case actionTypes.DELETETODO:\n        //     // Deleting a item from state\n        //     return state.filter(todo => todo._id !== action.payload._id)\n        // case actionTypes.UPDATENEWTODO:\n        //     // Updating an existing todo item in state\n        //     return state.map(todo => (\n        //         todo._id === action.payload._id ? {...todo,title: action.payload.title, description: action.payload.description, date:action.payload.date,time:action.payload.time} : todo\n        //     ))\n        default:\n            return[];\n\n    }\n} "],"mappings":"AAAA,OAAO,KAAKA,WAAW,MAAM,iBAAiB;AAC9C;AACA,OAAO,MAAMC,WAAW,GAAG,YAAwB;EAAA,IAAvBC,KAAK,uEAAG,EAAE;EAAA,IAAEC,MAAM;EAC1C,QAAOA,MAAM,CAACC,IAAI;IACd;IACA;IACA;IACA,KAAKJ,WAAW,CAACK,OAAO;MACpB;MACA,OAAOF,MAAM,CAACG,OAAO;;IAEzB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MACI,OAAM,EAAE;EAAC;AAGrB,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,YAAwB;EAAA,IAAvBL,KAAK,uEAAG,EAAE;EAAA,IAAEC,MAAM;EACzC,QAAOA,MAAM,CAACC,IAAI;IACd;IACA;IACA;;IAEA,KAAKJ,WAAW,CAACQ,UAAU;MACvB;MACA,OAAOL,MAAM,CAACG,OAAO;IACzB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MACI,OAAM,EAAE;EAAC;AAGrB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}