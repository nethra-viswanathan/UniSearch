{"ast":null,"code":"import { LISTUNI, LISTMAJORS, UNIBYID, LISTCOMMENT, ADDNEWCOMMENT } from './types';\n\n//Base URL for all APIs\nconst URL = 'http://localhost:8080';\n\n//API call for add comment\nexport const addComment = (uniId, comment, userName) => async dispatch => {\n  const res = await fetch(`${URL}/comment/add`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"userName\": userName,\n      \"comment\": comment,\n      \"universityId\": universityId\n    })\n  }).then(response => response.json()).then(value => {\n    dispatch({\n      type: ADDNEWCOMMENT,\n      payload: value\n    });\n  });\n};\n\n//API call to list all Universities from the DB\nexport const getAllUnis = () => async dispatch => {\n  try {\n    const res = await fetch(`${URL}/university/all`).then(res => res.json()).then(value => dispatch({\n      type: LISTUNI,\n      payload: value\n    }));\n  } catch (error) {\n    console.log(\"Could not fetch item\");\n  }\n};\n\n//API call to return details of a university\nexport const getUniById = id => async dispatch => {\n  try {\n    const res = await fetch(`${URL}/university/${id}`).then(res => res.json()).then(value => dispatch({\n      type: UNIBYID,\n      payload: value\n    }));\n  } catch (error) {\n    console.log(\"Could not fetch item\");\n  }\n};\nexport const getAllMajors = () => async dispatch => {\n  try {\n    const res = await fetch(`${URL}/major/all`).then(res => res.json()).then(value => dispatch({\n      type: LISTMAJORS,\n      payload: value\n    }));\n  } catch (error) {\n    console.log(\"Could not fetch item\");\n  }\n};\nexport const getAllComments = () => async dispatch => {\n  try {\n    const res = await fetch(`${URL}/comment/all`).then(res => res.json()).then(value => dispatch({\n      type: LISTCOMMENT,\n      payload: value\n    }));\n  } catch (error) {\n    console.log(\"Could not fetch item\");\n  }\n};\n\n// //API call to switch from completed to incomplete\n// export const toggleTodos = (id,status) => async(dispatch) => {\n\n//         const res = await fetch(`${URL}/update-todo?id=${id}`,{\n//             method:'PUT',\n//             headers: {\n//                 'Accept': 'application/json',\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({'status':status}) })\n//             .then(response => response.json())\n//             .then(value => \n//             { \n//                 dispatch({ type: TOGGLETODO, payload: value})}\n//                 )\n\n// }\n\n// //API call to delete an API\n// export const deleteTodos = (id) => async(dispatch) => {\n//     try{\n\n//         const res = await fetch(`${URL}/remove-todo?id=${id}`,{method : 'DELETE'})\n//         .then(res => res.json())\n//         .then(value => {dispatch({ type: DELETETODO, payload: value});console.log(\"vv\",value)});\n//     }catch(error){\n//         console.log(\"Could not delete item\")\n//     }\n// }\n\n// //API call to update an existing record\n// export const updateTodo = (id,title,desc,date,time) => async(dispatch) => {\n//     try{\n//         const res = await fetch(`${URL}/update-todo?id=${id}`, { \n//             method : 'PUT',\n//             headers: {\n//                 'Accept': 'application/json',\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({\"title\": title,\"description\" : desc, \"date\": date, \"time\": time}) })\n//             .then(response => response.json())\n//             .then(value => \n//             { \n//             dispatch({ type: UPDATENEWTODO, payload: value})}\n//                 )\n//     }catch(error){\n//         console.log(\"Could not update an item\")\n//     }\n// }","map":{"version":3,"names":["LISTUNI","LISTMAJORS","UNIBYID","LISTCOMMENT","ADDNEWCOMMENT","URL","addComment","uniId","comment","userName","dispatch","res","fetch","method","headers","body","JSON","stringify","universityId","then","response","json","value","type","payload","getAllUnis","error","console","log","getUniById","id","getAllMajors","getAllComments"],"sources":["/Users/nethraneu/Documents/WEB DEV/finalProject/final-project-electrons/frontend/src/redux/action/index.js"],"sourcesContent":["import {LISTUNI,LISTMAJORS,UNIBYID,LISTCOMMENT,ADDNEWCOMMENT} from './types';\n\n//Base URL for all APIs\nconst URL = 'http://localhost:8080';\n\n\n//API call for add comment\nexport const addComment = (uniId,comment,userName) => async(dispatch) => {\n    \n    const res = await fetch(`${URL}/comment/add`, {\n    method:'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify( {\"userName\": userName,\"comment\" : comment, \"universityId\": universityId} ) })\n    .then(response => response.json())\n   \n    .then(value => \n       { \n        dispatch({ type: ADDNEWCOMMENT, payload: value})}\n        )\n    \n\n\n}\n\n//API call to list all Universities from the DB\nexport const getAllUnis = () => async(dispatch) => {\n    try{\n        const res = await fetch(`${URL}/university/all`).then(res => res.json()).then(value => dispatch({ type: LISTUNI, payload: value}));\n        \n    }catch(error){\n        console.log(\"Could not fetch item\")\n    }\n}\n\n//API call to return details of a university\nexport const getUniById = (id) => async(dispatch) => {\n    try{\n        const res = await fetch(`${URL}/university/${id}`).then(res => res.json()).then(value => dispatch({ type: UNIBYID, payload: value}));\n        \n    }catch(error){\n        console.log(\"Could not fetch item\")\n    }\n}\n\nexport const getAllMajors = () => async(dispatch) => {\n    try{\n        const res = await fetch(`${URL}/major/all`).then(res => res.json()).then(value => dispatch({ type: LISTMAJORS, payload: value}));\n        \n    }catch(error){\n        console.log(\"Could not fetch item\")\n    }\n}\n\nexport const getAllComments = () => async(dispatch) => {\n    try{\n        const res = await fetch(`${URL}/comment/all`).then(res => res.json()).then(value => dispatch({ type: LISTCOMMENT, payload: value}));\n        \n    }catch(error){\n        console.log(\"Could not fetch item\")\n    }\n}\n\n// //API call to switch from completed to incomplete\n// export const toggleTodos = (id,status) => async(dispatch) => {\n        \n//         const res = await fetch(`${URL}/update-todo?id=${id}`,{\n//             method:'PUT',\n//             headers: {\n//                 'Accept': 'application/json',\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({'status':status}) })\n//             .then(response => response.json())\n//             .then(value => \n//             { \n//                 dispatch({ type: TOGGLETODO, payload: value})}\n//                 )\n                \n    \n// }\n\n// //API call to delete an API\n// export const deleteTodos = (id) => async(dispatch) => {\n//     try{\n        \n//         const res = await fetch(`${URL}/remove-todo?id=${id}`,{method : 'DELETE'})\n//         .then(res => res.json())\n//         .then(value => {dispatch({ type: DELETETODO, payload: value});console.log(\"vv\",value)});\n//     }catch(error){\n//         console.log(\"Could not delete item\")\n//     }\n// }\n\n// //API call to update an existing record\n// export const updateTodo = (id,title,desc,date,time) => async(dispatch) => {\n//     try{\n//         const res = await fetch(`${URL}/update-todo?id=${id}`, { \n//             method : 'PUT',\n//             headers: {\n//                 'Accept': 'application/json',\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({\"title\": title,\"description\" : desc, \"date\": date, \"time\": time}) })\n//             .then(response => response.json())\n//             .then(value => \n//             { \n//             dispatch({ type: UPDATENEWTODO, payload: value})}\n//                 )\n//     }catch(error){\n//         console.log(\"Could not update an item\")\n//     }\n// }\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}