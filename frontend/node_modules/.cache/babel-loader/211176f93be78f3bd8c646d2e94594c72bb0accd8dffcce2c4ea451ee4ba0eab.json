{"ast":null,"code":"import * as actionTypes from '../action/types';\n//Reducers to store all changes into states using redux\nexport const uniReducers = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case actionTypes.LISTUNI:\n      // Listing all Universities\n      return action.payload;\n    default:\n      return [];\n  }\n};\nexport const uniMajors = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case actionTypes.LISTMAJORS:\n      // Listing all Courses\n      return action.payload;\n    default:\n      return [];\n  }\n};\nexport const uniById = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case actionTypes.UNIBYID:\n      // Listing universities based on ID\n      return action.payload;\n    default:\n      return [];\n  }\n};\nexport const getComment = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case actionTypes.ADDNEWCOMMENT:\n      // Adding a todo item\n      return [...state, action.payload];\n    case actionTypes.LISTCOMMENT:\n      // Listing comments\n      return action.payload;\n    case actionTypes.UPDATECOMMENT:\n      // Updating an existing todo item in state\n      return state.map(comment => comment._id === action.payload._id ? {\n        ...comment,\n        userName: action.payload.userName,\n        comment: action.payload.comment,\n        universityId: action.payload.universityId\n      } : comment);\n    case actionTypes.DELETECOMMENT:\n      // Deleting a item from state\n      console.log(\"test\", state, action.payload._id);\n      return state.filter(comment => comment._id !== action.payload._id);\n    default:\n      return [];\n  }\n};","map":{"version":3,"names":["actionTypes","uniReducers","state","action","type","LISTUNI","payload","uniMajors","LISTMAJORS","uniById","UNIBYID","getComment","ADDNEWCOMMENT","LISTCOMMENT","UPDATECOMMENT","map","comment","_id","userName","universityId","DELETECOMMENT","console","log","filter"],"sources":["/Users/nethraneu/Documents/WEB DEV/finalProject/final-project-electrons/frontend/src/redux/reducers/uniReducers.js"],"sourcesContent":["import * as actionTypes from '../action/types'\n//Reducers to store all changes into states using redux\nexport const uniReducers = (state = [], action) => {\n    switch(action.type){\n     \n        case actionTypes.LISTUNI:\n            // Listing all Universities\n            return action.payload\n        \n        default:\n            return[];\n\n    }\n} \n\nexport const uniMajors = (state = [], action) => {\n    switch(action.type){\n        case actionTypes.LISTMAJORS:\n            // Listing all Courses\n            return action.payload\n        default:\n            return[];\n\n    }\n} \n\nexport const uniById = (state = [], action) => {\n    switch(action.type){\n        case actionTypes.UNIBYID:\n            // Listing universities based on ID\n            return action.payload\n        \n\n        default:\n            return[];\n\n    }\n} \n\nexport const getComment = (state = [], action) => {\n    switch(action.type){\n        case actionTypes.ADDNEWCOMMENT:\n            // Adding a todo item\n            return [ ...state,action.payload];\n        case actionTypes.LISTCOMMENT:\n            // Listing comments\n            return action.payload\n        case actionTypes.UPDATECOMMENT:\n            // Updating an existing todo item in state\n             return state.map(comment => (\n                comment._id === action.payload._id ? {...comment,userName: action.payload.userName, comment: action.payload.comment, universityId:action.payload.universityId} : comment\n            ))\n        case actionTypes.DELETECOMMENT:\n            // Deleting a item from state\n            console.log(\"test\",state,action.payload._id)\n            return state.filter(comment => comment._id !== action.payload._id)\n        default:\n            return[];\n\n    }\n} \n\n\n\n"],"mappings":"AAAA,OAAO,KAAKA,WAAW,MAAM,iBAAiB;AAC9C;AACA,OAAO,MAAMC,WAAW,GAAG,YAAwB;EAAA,IAAvBC,KAAK,uEAAG,EAAE;EAAA,IAAEC,MAAM;EAC1C,QAAOA,MAAM,CAACC,IAAI;IAEd,KAAKJ,WAAW,CAACK,OAAO;MACpB;MACA,OAAOF,MAAM,CAACG,OAAO;IAEzB;MACI,OAAM,EAAE;EAAC;AAGrB,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,YAAwB;EAAA,IAAvBL,KAAK,uEAAG,EAAE;EAAA,IAAEC,MAAM;EACxC,QAAOA,MAAM,CAACC,IAAI;IACd,KAAKJ,WAAW,CAACQ,UAAU;MACvB;MACA,OAAOL,MAAM,CAACG,OAAO;IACzB;MACI,OAAM,EAAE;EAAC;AAGrB,CAAC;AAED,OAAO,MAAMG,OAAO,GAAG,YAAwB;EAAA,IAAvBP,KAAK,uEAAG,EAAE;EAAA,IAAEC,MAAM;EACtC,QAAOA,MAAM,CAACC,IAAI;IACd,KAAKJ,WAAW,CAACU,OAAO;MACpB;MACA,OAAOP,MAAM,CAACG,OAAO;IAGzB;MACI,OAAM,EAAE;EAAC;AAGrB,CAAC;AAED,OAAO,MAAMK,UAAU,GAAG,YAAwB;EAAA,IAAvBT,KAAK,uEAAG,EAAE;EAAA,IAAEC,MAAM;EACzC,QAAOA,MAAM,CAACC,IAAI;IACd,KAAKJ,WAAW,CAACY,aAAa;MAC1B;MACA,OAAO,CAAE,GAAGV,KAAK,EAACC,MAAM,CAACG,OAAO,CAAC;IACrC,KAAKN,WAAW,CAACa,WAAW;MACxB;MACA,OAAOV,MAAM,CAACG,OAAO;IACzB,KAAKN,WAAW,CAACc,aAAa;MAC1B;MACC,OAAOZ,KAAK,CAACa,GAAG,CAACC,OAAO,IACrBA,OAAO,CAACC,GAAG,KAAKd,MAAM,CAACG,OAAO,CAACW,GAAG,GAAG;QAAC,GAAGD,OAAO;QAACE,QAAQ,EAAEf,MAAM,CAACG,OAAO,CAACY,QAAQ;QAAEF,OAAO,EAAEb,MAAM,CAACG,OAAO,CAACU,OAAO;QAAEG,YAAY,EAAChB,MAAM,CAACG,OAAO,CAACa;MAAY,CAAC,GAAGH,OACpK,CAAC;IACN,KAAKhB,WAAW,CAACoB,aAAa;MAC1B;MACAC,OAAO,CAACC,GAAG,CAAC,MAAM,EAACpB,KAAK,EAACC,MAAM,CAACG,OAAO,CAACW,GAAG,CAAC;MAC5C,OAAOf,KAAK,CAACqB,MAAM,CAACP,OAAO,IAAIA,OAAO,CAACC,GAAG,KAAKd,MAAM,CAACG,OAAO,CAACW,GAAG,CAAC;IACtE;MACI,OAAM,EAAE;EAAC;AAGrB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}